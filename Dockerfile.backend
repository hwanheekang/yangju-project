# 경량 알파인 리눅스 기반의 Node.js 20 이미지를 사용
FROM node:20-alpine

# 캐시 무효화를 위한 주석 (매번 다른 내용으로 변경)
#CACHE_BUSTER=202509072113

# 보안/최적화 기본값
ENV NODE_ENV=production

# nginx와 supervisor 설치 (다중 프로세스 관리용)
RUN apk add --no-cache nginx supervisor curl

# 컨테이너 내 작업 폴더
WORKDIR /app

# 의존성만 우선 복사하여 캐시 활용
COPY package*.json ./

# 잠금파일 존재 시 재현 가능한 설치, 없으면 일반 설치 (dev deps 제외)
RUN if [ -f package-lock.json ]; then npm ci --omit=dev; else npm install --omit=dev; fi \
    && npm cache clean --force

# nginx 설정 파일 생성
RUN mkdir -p /etc/nginx/conf.d && \
    echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '    listen 4000;' >> /etc/nginx/conf.d/default.conf && \
    echo '    client_max_body_size 50m;' >> /etc/nginx/conf.d/default.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass http://localhost:3000;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_read_timeout 300;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_connect_timeout 300;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_send_timeout 300;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

# nginx 메인 설정 수정
RUN sed -i 's/listen \[::\]:80 default_server;//' /etc/nginx/nginx.conf && \
    sed -i 's/listen 80 default_server;//' /etc/nginx/nginx.conf && \
    echo 'client_max_body_size 50m;' >> /etc/nginx/nginx.conf

# supervisor 설정 파일 생성
RUN echo '[supervisord]' > /etc/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisord.conf && \
    echo 'user=root' >> /etc/supervisord.conf && \
    echo '' >> /etc/supervisord.conf && \
    echo '[program:nodejs]' >> /etc/supervisord.conf && \
    echo 'command=node /app/src/app.js' >> /etc/supervisord.conf && \
    echo 'directory=/app' >> /etc/supervisord.conf && \
    echo 'user=node' >> /etc/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisord.conf && \
    echo 'environment=PORT=3000' >> /etc/supervisord.conf && \
    echo '' >> /etc/supervisord.conf && \
    echo '[program:nginx]' >> /etc/supervisord.conf && \
    echo 'command=nginx -g "daemon off;"' >> /etc/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisord.conf

# 애플리케이션 소스 복사
COPY . .

# 권한 설정
RUN chown -R node:node /app && \
    mkdir -p /var/log/nginx && \
    mkdir -p /var/lib/nginx && \
    chown -R nginx:nginx /var/log/nginx /var/lib/nginx

# 권장: 비루트 실행 (공식 node 이미지의 node 사용자 사용)
RUN chown -R node:node /app
USER node

# 헬스체크 (nginx 포트로 변경)
HEALTHCHECK --interval=30s --timeout=5s --start-period=20s --retries=3 \
  CMD curl -fsS http://localhost:4000/health || exit 1

# 포트 노출
EXPOSE 4000

# supervisor로 nginx와 node.js 동시 실행
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]