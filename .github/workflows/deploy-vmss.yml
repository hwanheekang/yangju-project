name: Deploy to VMSS (Rolling)

on:
  workflow_dispatch:
    inputs:
      sha_tag:
        description: "(선택) 배포할 이미지 SHA 태그 (미입력 시 latest)"
        required: false
        type: string
      target:
        description: "배포 대상 (frontend|backend)"
        required: true
        default: "frontend"
        type: choice
        options:
          - frontend
          - backend
  push:
    branches: [ "main" ]
    paths:
      - "infra/docker-compose.yml"
      - ".github/workflows/deploy-vmss.yml"

permissions:
  contents: read
  id-token: write

env:
  # 기본값 (입력에 따라 덮어씀)
  AZURE_RG: rg-bcd00
  VMSS_FE: vmss-fe-bcd00
  VMSS_BE: vmss-be-bcd00

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SELECTED_SHA: ${{ inputs.sha_tag }}
      TARGET: ${{ inputs.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Rolling update on VMSS
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            az account show -o table

            if [ -n "$SELECTED_SHA" ]; then
              echo "Using supplied SHA tag: $SELECTED_SHA"
              IMAGE_TAG="$SELECTED_SHA"
            else
              echo "No SHA provided. Using 'latest' tag."
              IMAGE_TAG="latest"
            fi

            if [ "$TARGET" = "frontend" ]; then
              VMSS_NAME="$VMSS_FE"
              echo "Target: frontend -> $VMSS_NAME"
            else
              VMSS_NAME="$VMSS_BE"
              echo "Target: backend -> $VMSS_NAME"
            fi

            echo "Deploying IMAGE_TAG=$IMAGE_TAG to VMSS $VMSS_NAME (resource group $AZURE_RG)"
            az vmss run-command invoke \
              -g $AZURE_RG -n $VMSS_NAME \
              --instance-id * \
              --command-id RunShellScript \
              --scripts "sudo az login --identity && sudo az acr login --name acrbcd00 && export IMAGE_TAG=$IMAGE_TAG && sudo docker compose -f /opt/yangju/docker-compose.yml pull && sudo systemctl restart yangju && sudo docker ps" \
              --query 'value[].message' -o tsv
            echo "Command dispatched to all instances (*)"
