name: Deploy to VMSS (Rolling)

on:
  workflow_dispatch:
    inputs:
      sha_tag:
        description: "(선택) 배포할 이미지 SHA 태그 (미입력 시 latest)"
        required: false
        type: string
  push:
    branches: [ "main" ]
    paths:
      - "infra/docker-compose.yml"
      - ".github/workflows/deploy-vmss.yml"

permissions:
  contents: read
  id-token: write

env:
  AZURE_RG: rg-yangju
  VMSS_NAME: vmss-yangju

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SELECTED_SHA: ${{ inputs.sha_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Rolling update on VMSS
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            az account show -o table

            if [ -n "$SELECTED_SHA" ]; then
              echo "Using supplied SHA tag: $SELECTED_SHA"
              IMAGE_TAG="$SELECTED_SHA"
            else
              echo "No SHA provided. Using 'latest' tag."
              IMAGE_TAG="latest"
            fi

            echo "Deploying IMAGE_TAG=$IMAGE_TAG to VMSS $VMSS_NAME"
            echo "Fetching instance IDs..."
            IDS=$(az vmss list-instances -g $AZURE_RG -n $VMSS_NAME --query '[].instanceId' -o tsv)
            if [ -z "$IDS" ]; then
              echo "No instances found in scale set $VMSS_NAME" >&2; exit 1;
            fi
            for ID in $IDS; do
              echo "-- Updating instance $ID"
              az vmss run-command invoke \
                -g $AZURE_RG -n $VMSS_NAME \
                --instance-id $ID \
                --command-id RunShellScript \
                --scripts "sudo az login --identity && sudo az acr login --name acrbcd00 && export IMAGE_TAG=$IMAGE_TAG && sudo docker compose -f /opt/yangju/docker-compose.yml pull && sudo systemctl restart yangju && sudo docker ps" \
                --query 'value[].message' -o tsv || { echo "Instance $ID update failed" >&2; exit 1; }
            done
            echo "All instances updated successfully."
