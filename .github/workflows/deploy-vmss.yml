name: Deploy to VMSS (Rolling)

on:
  workflow_dispatch:
    inputs:
      sha_tag:
        description: "(선택) 배포할 이미지 SHA 태그 (미입력 시 latest)"
        required: false
        type: string
      target:
        description: "배포 대상 (frontend|backend)"
        required: true
        default: "frontend"
        type: choice
        options:
          - frontend
          - backend
  push:
    branches: [ "main" ]
    paths:
      - "infra/docker-compose.yml"
      - ".github/workflows/deploy-vmss.yml"

permissions:
  contents: read
  id-token: write   # OIDC 필요

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_RG: rg-bcd00
  VMSS_FE: vmss-fe-bcd00
  VMSS_BE: vmss-be-bcd00
  ACR_NAME: acrbcd00

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SELECTED_SHA: ${{ github.event.inputs.sha_tag }}
      TARGET: ${{ github.event.inputs.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Decide tag / target
        id: prep
        run: |
          if [ -n "${{ env.SELECTED_SHA }}" ]; then
            echo "IMAGE_TAG=${{ env.SELECTED_SHA }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi
          
          if [ "${{ env.TARGET }}" = "frontend" ]; then
            echo "VMSS_NAME=${{ env.VMSS_FE }}" >> $GITHUB_ENV
          else
            echo "VMSS_NAME=${{ env.VMSS_BE }}" >> $GITHUB_ENV
          fi
          
          echo "Resolved -> IMAGE_TAG=${{ env.IMAGE_TAG }}, VMSS_NAME=${{ env.VMSS_NAME }}"

      - name: Rolling update on VMSS
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            echo "Deploying IMAGE_TAG=${IMAGE_TAG} to VMSS ${VMSS_NAME} (RG=${AZURE_RG})"
            az account show -o table
            az vmss run-command invoke \
              -g "${AZURE_RG}" -n "${VMSS_NAME}" \
              --instance-id "*" \
              --command-id RunShellScript \
              --scripts "set -e
              echo '== Instance Update Start =='
              echo 'IMAGE_TAG=${IMAGE_TAG}'
              sudo az login --identity
              sudo az acr login --name ${ACR_NAME}
              export IMAGE_TAG=${IMAGE_TAG}
              cd /opt/yangju
              sudo docker compose pull
              sudo systemctl restart yangju
              sleep 6
              if curl -fsS http://localhost:8080 >/dev/null 2>&1; then
                echo 'Health OK: http://localhost:8080'
              elif curl -fsS http://localhost/api/health >/dev/null 2>&1; then
                echo 'Health OK: /api/health'
              elif curl -fsS http://localhost/health >/dev/null 2>&1; then
                echo 'Health OK: /health'
              else
                echo 'WARN: health endpoint not reachable'
              fi
              sudo docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
              echo '== Instance Update End ==" \
              --query 'value[].message' -o tsv
            echo "Run-command dispatched to all instances (*)"

      - name: Summary
        run: |
          echo '### VMSS Deploy Summary' >> $GITHUB_STEP_SUMMARY
          echo "- Target: ${{ env.TARGET }}" >> $GITHUB_STEP_SUMMARY
          echo "- VMSS: ${VMSS_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- Image Tag: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ env.AZURE_RG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ACR: ${{ env.ACR_NAME }}" >> $GITHUB_STEP_SUMMARY