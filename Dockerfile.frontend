# --- 1단계: 빌드 스테이지 (Node.js로 React 앱 빌드) ---
FROM node:20.19-alpine AS builder

WORKDIR /app

# 캐시 최적화: 의존성만 우선 복사
COPY package*.json ./

# 잠금파일 우선 설치
RUN if [ -f package-lock.json ]; then npm ci; else npm install; fi

# 소스 복사 및 빌드
COPY . ./
RUN npm run build

# Runtime 단계: Nginx 경량 이미지 (최종 배포용)
FROM nginx:1.25-alpine

# (옵션) 헬스체크용 curl만 설치
RUN apk add --no-cache curl gettext

# 정적 산출물 복사
COPY --from=builder /app/dist /usr/share/nginx/html

# 커스텀 nginx.conf (리포지토리 구조 변경으로 Front-End/ 내부 배치)
COPY nginx.conf /etc/nginx/templates/default.conf.template

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -fsS http://localhost/health || exit 1

# --- Nginx 권한 문제 해결을 위해 이 부분을 수정하세요 ---
# 필요한 폴더들을 먼저 생성한 후, 소유권을 변경합니다.
RUN mkdir -p /var/lib/nginx /var/cache/nginx/client_temp /var/lib/nginx/tmp/client_body && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/lib/nginx /var/cache/nginx /var/run/nginx.pid /etc/nginx/conf.d

# 런타임 환경변수 치환 스크립트 (envsubst)
COPY --from=builder /bin/sh /bin/sh
ENV BACKEND_SCHEME=http BACKEND_HOST=localhost BACKEND_PORT=4000

ENTRYPOINT ["/bin/sh", "-c", "envsubst '$$BACKEND_SCHEME $$BACKEND_HOST $$BACKEND_PORT' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'" ]

# 보안: nginx를 non-root로 실행
# 권한 낮추기
USER nginx